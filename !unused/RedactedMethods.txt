
# Anagram Methods
    public static void debugSupportClasses(Dictionary d, AnaObj[] ana){
        System.out.println("Words:");
        for(int i = 0; i<ana.length; i++){
            System.out.println(ana[i].getWord());
        }
        System.out.println("----\nDictionary:");
        for(int i = 0; i<d.dictionaryLength(); i++){
            System.out.println(d.getWord(i));
        }
        System.out.println("----\nThe Indeces for Sizes!");
        for(int i = 31; i>20; i--){
            System.out.println("Length " + i + " at Index " + d.getLengthStartingIndex(i));
        }
        System.out.println("----");
    }

    
    // this method is greedy it only makes the longest word and doesn't care about letters being left
    // Supposed to find anagrams based on the dictionary and the anagram object
    public static void greedy(Dictionary d, AnaObj ana){
        // allows method to see the map of Anagram object
        HashMap<Character, Integer> temp = ana.getMap();
        System.out.println("Anagram Method word: " + ana.getWord());
        ArrayList<String> output = new ArrayList<>();
        // get the starting index of the dictionary based on the length of the anagram (skips unneeded searching)
        int startingIndeces = d.getLengthStartingIndex(ana.charsLeft());
        System.out.println("Starting Search from Index: " + startingIndeces);
        // loop through the dictionary to find possible anagrams
        for(int j = startingIndeces; j<d.dictionaryLength(); j++){
            HashMap<Character, Integer> prospectiveWord = d.getChars(j);
            // if this word is a prospective anagram,
            if(d.getWord(j).length() > ana.charsLeft()){
                continue;
            }
            else if(d.possibleAnagram(temp, j)){
                System.out.println(d.getWord(j) + " - has been deemed possible");
                for(char c : prospectiveWord.keySet()){
                    ana.take(c, prospectiveWord.get(c));
                }
                output.add(d.getWord(j));
                // sets j to look at the index of the next word of the same length
                temp = ana.getMap();
            }
        }
        for(String s : output){
            System.out.print(s + " ");
        }
    }
    // makes (or should) the best possible anagram
    public static ArrayList<String> optimalDebug(Dictionary d, AnaObj ana){
        ana.printMap();
        // initialise working map
        System.out.println("Starting Optimal Debug Method\n----");
        HashMap<Character, Integer> workingMap = ana.getTemplateMap();
        ArrayList<String> output = new ArrayList<>();
        int startingIndeces = d.getLengthStartingIndex(ana.charsLeft());
        ArrayList<String> tried = new ArrayList<>();
        int totalChars = 0;
        
        for(int i = startingIndeces; i < d.dictionaryLength(); i++){
            System.out.println();
            if(tried.contains(d.getWord(i))){
                System.out.println("Skipping Over:" + d.getWord(i));
                continue;
            }
            HashMap<Character, Integer> prospectiveWord = d.getChars(i);
            System.out.println("Trying: " + d.getWord(i));
            // iterate through all the chars to make sure that this word is possible
            for(char c : workingMap.keySet()){
                if(workingMap.get(c) + prospectiveWord.get(c) > ana.check(c)){
                    System.out.println("Didn't have enough " + c + " left");
                    System.out.println(workingMap.get(c) + " + " + prospectiveWord.get(c) + " > " + ana.check(c));
                    if(prospectiveWord.get(c) > ana.check(c)){
                        System.out.println(d.getWord(i) + " will never work");
                        tried.add(d.getWord(i));
                    }
                    break;
                }
                // if got to the end without breaking
                if(c == 'z'){
                    // add word to the list of words that work
                    output.add(d.getWord(i));
                    System.out.println("Added: " + d.getWord(i));
                    if(output.size() == 1){
                        tried.add(d.getWord(i));
                        System.out.println("Added to Tried: " + d.getWord(i));
                    }
                    System.out.println("Adding chars to working map");
                    for(char c2 : prospectiveWord.keySet()){
                        workingMap.put(c2, workingMap.get(c2) + prospectiveWord.get(c2));
                    }
                }
            }
            totalChars = workingMap.values().stream().mapToInt(Integer::intValue).sum();
            if(ana.charsLeft() < totalChars){
                output.clear();
                i = startingIndeces;
                workingMap = ana.getTemplateMap();
            }else if(ana.charsLeft() <= totalChars){
                return output;
            }
        }
        System.out.println("----");
        output.add("No anagrams possible given dictionary");
        return output;
    }
# AnaObj

    public void printMap(){
        for (char c = 'a'; c <= 'z'; c++) {
            System.out.print(c + ": " + letters.get(c) + ", ");
        }
        // amtChars value is correct: System.out.println("Length: " + amtChars);
    }
